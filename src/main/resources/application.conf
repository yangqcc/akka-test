akka {
  log-dead-letters = 10
  log-dead-letters-during-shutdown = on
  actor {
    guardian-supervisor-strategy = "com.yqc.supervisor.CustomSupervisorStrategy"
  }
}
//MyDispatcherExample {
my-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

#akka.actor.deployment {
# /test-actor {
#   dispatcher = my-dispatcher
# }
#}
//}

MyMailBoxConfig {
  bounded-mailbox {
    mailbox-type = "akka.dispatch.BoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 10s
  }

  akka.actor.mailbox.requirements {
    "akka.dispatch.BoundedMessageQueueSemantics" = bounded-mailbox
  }

  prio-dispatcher {
    mailbox-type = "com.yqc.akka.mailbox.MyPriorityMailbox"
    # What kind of ExecutionService to use
    executor = "fork-join-executor"
    # Configuration for the fork join pool
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 2
      # Parallelism (threads) ... ceil(available processors * factor)
      parallelism-factor = 2.0
      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 10
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 100
  }
}

CustomMailBox {
  custom-dispatcher {
    mailbox-type = "com.yqc.akka.mailbox.MyPriorityMailbox"
    mailbox-requirement = "com.yqc.akka.mailbox.custom.MyUnboundedMailbox"
    # What kind of ExecutionService to use
    executor = "fork-join-executor"
    # Configuration for the fork join pool
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 2
      # Parallelism (threads) ... ceil(available processors * factor)
      parallelism-factor = 2.0
      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 10
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 100
  }

  akka.actor.mailbox.requirements {
    "com.yqc.akka.mailbox.custom.MyUnboundedMessageQueueSemantics" = custom-dispatcher-mailbox
  }

  custom-dispatcher-mailbox {
    mailbox-type = "com.yqc.akka.mailbox.custom.MyUnboundedMailbox"
  }
}

akka.actor.deployment {
  /myactor {
    dispatcher = my-dispatcher
  }
}

akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"

akka.persistence.journal.leveldb.dir = "log/journal"
akka.persistence.snapshot-store.local.dir = "log/snapshots"

# DO NOT USE THIS IN PRODUCTION !!!
# See also https://github.com/typesafehub/activator/issues/287
akka.persistence.journal.leveldb.native = false  //因为我们本地并没有安装leveldb，所以这个属性置为false，但是生产环境并不推荐使用

akka.actor.serializers {
  kryo = "com.twitter.chill.akka.AkkaSerializer"
}

akka.actor.serialization-bindings {
  "scala.Product" = kryo
  "akka.persistence.PersistentRepr" = kryo
}